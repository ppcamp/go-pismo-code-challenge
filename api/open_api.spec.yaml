openapi: 3.0.4
info:
  title: PISMO API
  description: |-
    Basic documentation for HTTP endpoints for this challenge.
  version: 0.1.0
  contact:
    email: p.augustocampos@gmail.com
  license:
    name: MIT
    url: https://github.com/ppcamp/go-pismo-code-challenge/blob/main/LICENSE

servers:
  - url: http://localhost:8080
    description: Local development server.
  # - url: http://staging-api.example.com
  #   description: Optional server description, e.g. Internal staging server for testing

tags:
  - name: accounts
    description: Accounts management
  - name: transactions
    description: Transactions management
  - name: health
    description: System/Service related endpoints
    # externalDocs:
    #   description: Find out more about our store
    #   url: http://swagger.io

paths:
  /health:
    get:
      summary: Healthcheck.
      tags:
        - health
      responses:
        "200": 
          description: Service is ok. Any other status, you must check your env.
  /accounts:
    post:
      summary: Create an account.
      description: Create an account.
      tags:
        - accounts
      requestBody:
        description: Create acocunt body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccount'
        required: true
      responses:
        "201": 
          description: Everything ok, and transaction was created.
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Some unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /accounts/{id}:
    get:
      summary: Get an existent account.
      description: Get an existent account.
      tags:
        - accounts
      parameters:
        - name: id
          in: path
          description: The account int64 id.
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200": 
          description: Account found, return it as json.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        "400":
          description: Invalid id/path.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Request was fine, but didn't find any match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Some unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /transactions:
    post:
      summary: Create a transaction.
      description: Create a transaction.
      tags:
        - transactions
      requestBody:
        description: Create transactions body.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransaction'
        required: true
      responses:
        "201": 
          description: Everything went fine, and transaction was created.
        "400":
          description: Invalid payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Some unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 400
        message:
          type: string
          format: string
          example: "error caused by something"
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 16512
        document_number:
          type: string
          format: string
          example: "12345678900"
    CreateAccount:
      type: object
      properties:
        document_number:
          type: string
          format: string
          example: "12345678900"
    CreateTransaction:
      type: object
      properties:
        account_id:
          type: integer
          format: int64
          example: 10
        operation_type_id:
          type: integer
          format: int64
          example: 4
        amount:
          type: number
          format: double
          example: 10.11

